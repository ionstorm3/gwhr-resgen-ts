import {IGhTranslator} from "./iGhTranslator";
import {GhResourceDocument} from "../models/ghResourceDocument";
import {GhStringUtils} from "../utilities/ghStringUtils";

export class GhTypescriptClassTranslator implements IGhTranslator {
    private readonly _tmplHeader: string = "/* \nThis code was generated by the resgen-ts tool.\nChanges to this file may cause incorrect behavior and will be lost if\nthe code is regenerated \n*/\n";

    private readonly _tmplClass: string = "import {{1}} from './{3}'; \n\nexport class {0} implements {1} {{2}}";
    private readonly _tmplProperty: string = "\n\t/** {2} */\n\tpublic get {0}(): string {\n\t\treturn \"{1}\";\n\t}\n";

    //    private readonly _tmplProperty: string = "\n\t/** {1} */\n\treadonly {0}: string;"

    private getClassName(document: GhResourceDocument): string {
        return GhStringUtils.toPascalCase(document.name);
    }

    private getClassFileName(document: GhResourceDocument): string {
        return `${GhStringUtils.toCamelCase(document.name)}.res.ts`;
    }

    private getInterfaceName(document: GhResourceDocument): string {
        return `I${GhStringUtils.toPascalCase(document.name)}`;
    }

    private getInterfaceFileName(document: GhResourceDocument): string {
        return `i${GhStringUtils.toPascalCase(document.name)}.res.ts`;
    }

    private generateClass(document: GhResourceDocument): string {
        let body: string = "";
        for (const item of document.items) {
            body += GhStringUtils.format(this._tmplProperty, GhStringUtils.toCamelCase(item[0]), item[1].value, item[1].comment);
        }

        const content: string = GhStringUtils.format(this._tmplClass,
            this.getClassName(document),
            this.getInterfaceName(document),
            body,
            `${GhStringUtils.toCamelCase(this.getInterfaceName(document))}.res`);
        return content;
    }

    public async saveAsync(document: GhResourceDocument): Promise<void> {
        let content: string = this.generateClass(document);
        content = `${this._tmplHeader}\n${content}`;

        await document.writeToDiskAsync(this.getClassFileName(document), content);
    }

}